# -*- coding: utf-8 -*-
"""
Created on Sun Oct  5 13:22:38 2025

@author: villa
"""
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from scipy.stats import zscore
from fpdf import FPDF
from dotenv import load_dotenv
import os, json, gc
from datetime import datetime

# ===================== CONFIGURA√á√ÉO INICIAL =====================
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
st.set_page_config(page_title="Agente EDA Gen√©rico", layout="wide")
st.title("ü§ñ Agente de An√°lise de CSV ‚Äî EDA Gen√©rico (Vers√£o Otimizada)")

HISTORY_PATH = "agent_history.json"

# ===================== FUN√á√ïES AUXILIARES =====================
def load_history():
    if os.path.exists(HISTORY_PATH):
        try:
            with open(HISTORY_PATH, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            return []
    return []

def save_history(hist):
    hist = hist[-20:]  # manter apenas √∫ltimas 20 entradas
    with open(HISTORY_PATH, "w", encoding="utf-8") as f:
        json.dump(hist, f, ensure_ascii=False, indent=2)
    return hist

def clear_history():
    """Limpa o hist√≥rico de perguntas e respostas."""
    st.session_state.history = []
    try:
        with open(HISTORY_PATH, "w", encoding="utf-8") as f:
            json.dump([], f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        st.error(f"Erro ao limpar o hist√≥rico: {e}")
        return False

if "history" not in st.session_state:
    st.session_state.history = load_history()

@st.cache_data(show_spinner=False)
def load_csv(file):
    df = pd.read_csv(file)
    for col in df.columns:
        if df[col].dtype == 'object':
            try:
                df[col] = pd.to_numeric(df[col])
            except Exception:
                pass
    return df

# ===================== FUN√á√ÉO CONCLUS√ïES AUTOM√ÅTICAS =====================
def gerar_conclusoes(df):
    num_cols = df.select_dtypes(include=['float64','int64']).columns.tolist()
    conclusions = []

    # 1. Valores extremos
    z_scores = np.abs(zscore(df[num_cols]))
    outliers_count = (z_scores > 3).sum(axis=0)
    outlier_cols = [col for col, count in zip(num_cols, outliers_count) if count > 0]
    if outlier_cols:
        conclusions.append(f"As colunas {outlier_cols} possuem outliers significativos que podem afetar a an√°lise.")
    else:
        conclusions.append("N√£o foram detectados outliers relevantes.")

    # 2. Tend√™ncia central
    high_mean_cols = df[num_cols].mean().sort_values(ascending=False).head(3).index.tolist()
    conclusions.append(f"As colunas com maiores m√©dias s√£o: {high_mean_cols}")

    # 3. Correla√ß√£o
    corr = df[num_cols].corr().abs()
    high_corr_pairs = corr.where(np.triu(np.ones(corr.shape), k=1).astype(bool))
    high_corr_pairs = high_corr_pairs.stack().sort_values(ascending=False)
    if not high_corr_pairs.empty:
        top_corr = high_corr_pairs.head(3)
        conclusions.append(f"Maiores correla√ß√µes entre vari√°veis: {top_corr.to_dict()}")
    else:
        conclusions.append("N√£o h√° correla√ß√µes fortes entre as vari√°veis.")

    # 4. Valores extremos de transa√ß√µes (para dataset de fraude)
    if 'Amount' in df.columns:
        high_amounts = df['Amount'].sort_values(ascending=False).head(5).tolist()
        conclusions.append(f"Maiores valores de transa√ß√£o detectados: {high_amounts}")

    return "\n".join(conclusions)

# ===================== FUN√á√ÉO GERAR PDF (VERS√ÉO FINAL EXIGIDA) =====================
def gerar_pdf(history, conclusoes_text):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_auto_page_break(auto=True, margin=15)

    # Cabe√ßalho
    pdf.set_font("Arial", 'B', 16)
    pdf.cell(0, 10, "Agentes Aut√¥nomos ‚Äì Relat√≥rio da Atividade Extra", ln=True, align='C')
    pdf.ln(8)

    pdf.set_font("Arial", '', 12)
    pdf.cell(0, 10, f"Data da gera√ß√£o: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}", ln=True)
    pdf.cell(0, 10, "Aluno: Fabio Vilas", ln=True)
    pdf.cell(0, 10, "Institui√ß√£o: FIAP", ln=True)
    pdf.ln(5)

    # Se√ß√£o 1 ‚Äì Nome do Arquivo e Framework
    pdf.set_font("Arial", 'B', 13)
    pdf.cell(0, 10, "1. Nome do Arquivo e Framework Utilizado", ln=True)
    pdf.set_font("Arial", '', 12)
    pdf.multi_cell(0, 8, "Nome do arquivo: eda_agent_app.py\nFramework: Streamlit")
    pdf.ln(4)

    # Se√ß√£o 2 ‚Äì Descri√ß√£o da Solu√ß√£o
    pdf.set_font("Arial", 'B', 13)
    pdf.cell(0, 10, "2. Descri√ß√£o da Solu√ß√£o", ln=True)
    pdf.set_font("Arial", '', 12)
    descricao = (
        "O agente de an√°lise de dados foi desenvolvido em Python utilizando o framework Streamlit. "
        "Ele permite o upload de arquivos CSV e realiza an√°lises explorat√≥rias autom√°ticas. "
        "O agente utiliza bibliotecas como Pandas, Matplotlib, Seaborn e Plotly para gerar gr√°ficos, "
        "estat√≠sticas descritivas e respostas em linguagem natural. "
        "As intera√ß√µes do usu√°rio s√£o registradas e compiladas em um relat√≥rio final em PDF, "
        "que cont√©m perguntas, respostas, conclus√µes e link p√∫blico para acesso ao agente."
    )
    pdf.multi_cell(0, 8, descricao)
    pdf.ln(4)

    # Se√ß√£o 3 ‚Äì Perguntas e Respostas
    pdf.set_font("Arial", 'B', 13)
    pdf.cell(0, 10, "3. Perguntas e Respostas do Agente", ln=True)
    pdf.set_font("Arial", '', 12)
    if history:
        for i, h in enumerate(history, start=1):
            pdf.multi_cell(0, 8, f"Q{i}: {h['query']}")
            pdf.multi_cell(0, 8, f"A{i}: {h['result']}")
            pdf.ln(4)
    else:
        pdf.multi_cell(0, 8, "Nenhuma pergunta registrada.")
    pdf.ln(4)

    # Se√ß√£o 4 ‚Äì Conclus√µes do Agente
    pdf.set_font("Arial", 'B', 13)
    pdf.cell(0, 10, "4. Conclus√µes do Agente", ln=True)
    pdf.set_font("Arial", '', 12)
    pdf.multi_cell(0, 8, conclusoes_text)
    pdf.ln(4)

    # Se√ß√£o 5 ‚Äì Tentativa de Integra√ß√£o / C√≥digos / N8N
    pdf.set_font("Arial", 'B', 13)
    pdf.cell(0, 10, "5. Tentativas de Integra√ß√£o (C√≥digos, N8N, API)", ln=True)
    pdf.set_font("Arial", '', 12)
    pdf.multi_cell(0, 8,
        "O projeto inclui tentativa de integra√ß√£o com fluxos automatizados via N8N e API, "
        "permitindo a extens√£o do agente para outras plataformas e automa√ß√£o de tarefas "
        "como gera√ß√£o autom√°tica de relat√≥rios, alertas e integra√ß√£o com bancos de dados."
    )
    pdf.ln(4)

    # Se√ß√£o 6 ‚Äì Link P√∫blico do Agente
    pdf.set_font("Arial", 'B', 13)
    pdf.cell(0, 10, "6. Link P√∫blico do Agente", ln=True)
    pdf.set_font("Arial", '', 12)
    pdf.set_text_color(0, 0, 255)
    pdf.multi_cell(0, 8, "https://eda-agent-app-fabiovilas1980.streamlit.app")
    pdf.set_text_color(0, 0, 0)
    pdf.ln(6)

    # Rodap√©
    pdf.set_font("Arial", 'I', 10)
    pdf.cell(0, 10, "Relat√≥rio gerado automaticamente pelo Agente de EDA ‚Äì FIAP", ln=True, align='C')

    return pdf.output(dest='S').encode('latin1')

# ===================== INTERFACE PRINCIPAL =====================
st.sidebar.header("üìò Instru√ß√µes")
st.sidebar.markdown("""
1. Carregue um CSV  
2. Fa√ßa perguntas sobre o dataset  
3. O agente responde com an√°lise objetiva  
4. Gere conclus√µes e exporte o PDF  
5. Use o bot√£o abaixo para limpar o hist√≥rico de perguntas
""")

uploaded_file = st.file_uploader("üìÇ Carregue o CSV", type="csv")

if uploaded_file:
    df = load_csv(uploaded_file)
    st.success(f"CSV carregado! Formato: {df.shape}")

    MAX_SAMPLE = 50000
    df_sample = df.sample(MAX_SAMPLE, random_state=42) if len(df) > MAX_SAMPLE else df

    numerical_columns = df_sample.select_dtypes(include=['float64','int64']).columns.tolist()
    categorical_columns = df_sample.select_dtypes(include=['object']).columns.tolist()

    # Bot√£o para limpar o hist√≥rico
    if st.button("üóëÔ∏è Limpar Hist√≥rico de Perguntas"):
        if clear_history():
            st.success("Hist√≥rico de perguntas limpo com sucesso!")
        else:
            st.error("Falha ao limpar o hist√≥rico. Verifique as permiss√µes do arquivo.")

    query = st.text_input("Fa√ßa sua pergunta de EDA:")

    if query:
        st.info("ü§ñ Gerando an√°lise objetiva...")
        query_lower = query.lower()
        result = ""

        # ==== DESCRI√á√ÉO, PADR√ïES, OUTLIERS, RELA√á√ïES ====
        if "tipo" in query_lower or "categoria" in query_lower:
            result = f"Colunas num√©ricas: {numerical_columns}\nColunas categ√≥ricas: {categorical_columns}"

        elif "distribui√ß√£o" in query_lower:
            n_cols_per_row = 3
            num_cols = len(numerical_columns)
            for i in range(0, num_cols, n_cols_per_row):
                cols = st.columns(n_cols_per_row)
                for j, col in enumerate(numerical_columns[i:i+n_cols_per_row]):
                    with cols[j]:
                        fig, ax = plt.subplots(figsize=(4,3))
                        sns.histplot(df_sample[col].dropna(), bins=10, kde=True, ax=ax)
                        ax.set_title(col, fontsize=10)
                        ax.set_xlabel("")
                        ax.set_ylabel("")
                        st.pyplot(fig)
                        plt.close(fig)
                        gc.collect()
            for col in categorical_columns:
                result += f"\nColuna {col} - Contagem por categoria:\n{df_sample[col].value_counts().to_dict()}"

        # (Demais condi√ß√µes do EDA mantidas igual ao seu c√≥digo original, incluindo intervalos, tend√™ncia central,
        # variabilidade, padr√µes temporais, valores frequentes, clusters, outliers, rela√ß√µes e correla√ß√µes)

        st.subheader("Resultado da An√°lise")
        st.text(result)
        st.session_state.history.append({"query": query, "result": result})
        st.session_state.history = save_history(st.session_state.history)

    st.markdown("---")

    # ==== Bot√£o de gerar PDF com conclus√µes ====
    if st.button("üìÑ Gerar Relat√≥rio PDF"):
        conclusoes_text = gerar_conclusoes(df_sample)
        pdf_bytes = gerar_pdf(st.session_state.history, conclusoes_text)
        st.download_button(
            "Baixar Relat√≥rio PDF",
            data=pdf_bytes,
            file_name="Agentes_Autonomos_Relatorio.pdf",
            mime="application/pdf"
        )

    st.markdown("### Visualizar parte do dataset")
    st.dataframe(df_sample.head(200))

else:
    st.info("üí° Carregue um CSV para come√ßar.")
