# -*- coding: utf-8 -*-
"""
Created on Sun Oct  5 13:22:38 2025

@author: villa
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import io, base64, os, json, traceback, contextlib
from openai import OpenAI
from dotenv import load_dotenv
from fpdf import FPDF

# =====================
# CONFIGURA√á√ÉO INICIAL
# =====================
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if not OPENAI_API_KEY:
    st.error("‚ùå OPENAI_API_KEY n√£o encontrada. Configure em .env ou em Secrets.")
    st.stop()

client = OpenAI(api_key=OPENAI_API_KEY)
st.set_page_config(page_title="Agente EDA Gen√©rico", layout="wide")
st.title("ü§ñ Agente de An√°lise de CSV ‚Äî EDA Gen√©rico (Vers√£o Final)")

HISTORY_PATH = "agent_history.json"

# =====================
# FUN√á√ïES AUXILIARES
# =====================
def load_history():
    if os.path.exists(HISTORY_PATH):
        try:
            with open(HISTORY_PATH, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            return []
    return []

def save_history(hist):
    with open(HISTORY_PATH, "w", encoding="utf-8") as f:
        json.dump(hist, f, ensure_ascii=False, indent=2)

if "history" not in st.session_state:
    st.session_state.history = load_history()

@st.cache_data(show_spinner=False)
def load_csv(file):
    df = pd.read_csv(file)
    # Corrige deprecia√ß√£o do errors='ignore'
    for col in df.columns:
        if df[col].dtype == 'object':
            try:
                df[col] = pd.to_numeric(df[col])
            except Exception:
                pass
    return df

def generate_response(prompt, mode="code"):
    """mode='code' retorna c√≥digo Python; mode='text' retorna resumo textual"""
    system_msg = "Voc√™ √© um especialista em EDA."
    if mode == "code":
        system_msg += " Gere apenas c√≥digo Python execut√°vel, sem ```."
    else:
        system_msg += " Responda com texto anal√≠tico, claro e objetivo."

    messages = [
        {"role": "system", "content": system_msg},
        {"role": "user", "content": prompt}
    ]
    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=messages,
        max_tokens=1200,
        temperature=0
    )
    return resp.choices[0].message.content.strip()

def execute_code(code, df):
    """Executa c√≥digo Python seguro e captura gr√°ficos e prints"""
    allowed_builtins = {
        "__import__": __import__,
        "print": print,
        "len": len, "min": min, "max": max, "sum": sum,
        "range": range, "int": int, "float": float, "str": str,
        "bool": bool, "list": list, "dict": dict, "set": set, "enumerate": enumerate
    }
    local_env = {"df": df, "pd": pd, "plt": plt, "sns": sns, "px": px, "io": io, "base64": base64, "st": st}
    output = io.StringIO()
    img_b64_list = []

    try:
        with contextlib.redirect_stdout(output):
            exec(code, {"__builtins__": allowed_builtins}, local_env)
    except Exception:
        return f"Erro durante execu√ß√£o:\n{traceback.format_exc()}", None

    text_output = output.getvalue().strip()

    # Captura gr√°ficos Matplotlib
    for fig_num in plt.get_fignums():
        buf = io.BytesIO()
        plt.figure(fig_num).savefig(buf, format="png", bbox_inches="tight")
        buf.seek(0)
        img_b64_list.append(base64.b64encode(buf.read()).decode())
        plt.close(fig_num)

    if not text_output:
        text_output = "C√≥digo executado com sucesso, mas sem sa√≠da textual."

    return text_output, img_b64_list if img_b64_list else None

def gerar_pdf(hist):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", "B", 16)
    pdf.cell(0, 10, "Agentes Aut√¥nomos ‚Äì Relat√≥rio da Atividade Extra", ln=True, align="C")
    pdf.ln(10)
    pdf.set_font("Arial", "", 12)

    sections = [
        ("1. Framework escolhida", "Streamlit + OpenAI API (gpt-4o-mini)."),
        ("2. Estrutura da solu√ß√£o", "O agente l√™ um CSV, interpreta perguntas, gera c√≥digo Python para EDA com gr√°ficos e conclus√µes."),
        ("3. Perguntas e respostas", "")
    ]

    for title, content in sections:
        pdf.set_font("Arial", "B", 13)
        pdf.cell(0, 8, title, ln=True)
        pdf.set_font("Arial", "", 12)
        pdf.multi_cell(0, 7, content)
        pdf.ln(4)

    for h in hist:
        pdf.set_font("Arial", "B", 12)
        pdf.multi_cell(0, 7, f"Pergunta: {h['query']}")
        pdf.set_font("Arial", "", 12)
        pdf.multi_cell(0, 7, f"Resposta: {h['result'][:700]}")
        pdf.ln(4)

    pdf.output("Agentes Aut√¥nomos ‚Äì Relat√≥rio da Atividade Extra.pdf")
    return "Agentes Aut√¥nomos ‚Äì Relat√≥rio da Atividade Extra.pdf"

# =====================
# INTERFACE PRINCIPAL
# =====================
st.sidebar.header("üìò Instru√ß√µes")
st.sidebar.markdown("""
1. Carregue um CSV
2. Fa√ßa perguntas sobre o dataset
3. O agente responde com c√≥digo, gr√°ficos e texto
4. Gere conclus√µes e exporte o PDF
""")

uploaded_file = st.file_uploader("üìÇ Carregue o CSV", type="csv")

if uploaded_file:
    df = load_csv(uploaded_file)
    st.success(f"CSV carregado! Formato: {df.shape}")

    MAX_SAMPLE = 150000
    df_sample = df.sample(MAX_SAMPLE, random_state=42) if len(df) > MAX_SAMPLE else df

    # Colunas num√©ricas relevantes
    excluded_cols = ['Time', 'Class']
    numeric_cols = df_sample.select_dtypes(include='number').columns.difference(excluded_cols)
    df_numeric = df_sample[numeric_cols]

    df_info = f"Colunas: {list(df_sample.columns)}; Tipos: {df_sample.dtypes.to_dict()}"
    query = st.text_input("Fa√ßa sua pergunta de EDA:")

    if query:
        st.info("ü§ñ Gerando c√≥digo e executando automaticamente...")
        prompt = f"O dataframe `df` est√° carregado com {df_info}. Pergunta: {query}\n" \
                 f"Analise apenas as colunas num√©ricas relevantes ({list(df_numeric.columns)}). " \
                 f"Inclua gr√°ficos, m√©dia, mediana, min, max, std e contagem de valores."
        code = generate_response(prompt, mode="code")
        st.code(code, language="python")
        result, img_b64_list = execute_code(code, df_sample)
        st.subheader("Resultado da An√°lise")
        st.write(result)
        if img_b64_list:
            for img_b64 in img_b64_list:
                st.image(base64.b64decode(img_b64), use_container_width=True)
        st.session_state.history.append({"query": query, "result": result})
        save_history(st.session_state.history)

    st.markdown("---")

    if st.button("üß† Gerar Conclus√µes"):
        with st.spinner("Analisando hist√≥rico..."):
            history_txt = "\n".join([f"P: {h['query']}\nR: {h['result']}" for h in st.session_state.history])
            concl = generate_response(f"Com base nestas intera√ß√µes: {history_txt}\nResuma as conclus√µes gerais sobre o dataset.", mode="text")
        st.subheader("Conclus√µes do agente")
        st.write(concl)
        st.session_state.history.append({"query": "CONCLUS√ïES", "result": concl})
        save_history(st.session_state.history)

    if st.button("üìÑ Gerar Relat√≥rio PDF"):
        path = gerar_pdf(st.session_state.history)
        with open(path, "rb") as f:
            st.download_button("Baixar Relat√≥rio PDF", data=f, file_name=path, mime="application/pdf")

    st.markdown("### Visualizar parte do dataset")
    st.dataframe(df_sample.head(200))

    st.markdown("### A√ß√µes r√°pidas pr√©-definidas")
    if st.button("Resumo estat√≠stico (describe)"):
        st.write(df_numeric.describe().T)
    if st.button("Contagem de classes (Class)"):
        if "Class" in df_sample.columns:
            st.write(df_sample['Class'].value_counts())
            fig = px.histogram(df_sample, x='Class', title='Contagem por Classe')
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("A coluna 'Class' n√£o foi encontrada no dataset.")
else:
    st.info("üí° Carregue um CSV para come√ßar.")
